"""
Django settings for Hello project.

Generated by 'django-admin startproject' using Django 3.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os
from django.contrib.messages import constants as messages

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'e+e#vq+j1^$m+ipl$m6n$&fk!k!ewtkoqe$4--!#tfvx&j5w#&'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['221.171.85.50', '127.0.0.1']


# Application definition

INSTALLED_APPS = [
    'home.apps.HomeConfig',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'routing',
    
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'Hello.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, "templates") ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'Hello.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = '/static/'


# Added manually
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static") 
]


# import ldap
# from django_auth_ldap.config import LDAPSearch, LDAPGroupQuery,GroupOfNamesType,PosixGroupType
# from django.core.cache import cache
# AUTHENTICATION_BACKENDS = [
#     'django_auth_ldap.backend.LDAPBackend',  # LDAP backend
#     'django.contrib.auth.backends.ModelBackend',  # Django default backend
# ]

# AUTH_LDAP_SERVER_URI = cache.get('LDAP_SERVER_URI', 'ldap://127.0.0.1')
# AUTH_LDAP_BIND_DN = cache.get('LDAP_BIND_DN')
# AUTH_LDAP_BIND_PASSWORD = cache.get('LDAP_BIND_PASSWORD')
# AUTH_LDAP_USER_SEARCH = LDAPSearch('dc=hughesdev,dc=com',ldap.SCOPE_SUBTREE, '(uid=%(user)s)')
# AUTH_LDAP_GROUP_SEARCH = LDAPSearch('dc=hughesdev,dc=com',ldap.SCOPE_SUBTREE, '(objectClass=top)')
# AUTH_LDAP_GROUP_TYPE = PosixGroupType(name_attr="cn")
# AUTH_LDAP_MIRROR_GROUPS = True

#     # Populate the Django user from the LDAP directory.
# AUTH_LDAP_REQUIRE_GROUP = "cn=enabled,ou=groups,dc=hughesdev,dc=com"

# AUTH_LDAP_USER_ATTR_MAP = {
#         "first_name": "givenName",
#         "last_name": "sn",
#         "email": "mail",
#         "username": "uid",
#         "password": "userPassword",
# }
# AUTH_LDAP_PROFILE_ATTR_MAP = {
#         "home_directory": "homeDirectory"
# }
# AUTH_LDAP_USER_FLAGS_BY_GROUP = {
#         "is_active": "cn=active,ou=groups,dc=hughesdev,dc=com",
#         "is_staff": "cn=staff,ou=groups,dc=hughesdev,dc=com",
#         "is_superuser": "cn=superuser,ou=groups,dc=hughesdev,dc=com"
# }
    
# AUTH_LDAP_ALWAYS_UPDATE_USER = True
# AUTH_LDAP_FIND_GROUP_PERMS = True
# AUTH_LDAP_CACHE_TIMEOUT = 3600
    
# AUTH_LDAP_FIND_GROUP_PERMS = True
    
#     # Keep ModelBackend around for per-user permissions and maybe a local
#     # superuser.
# AUTHENTICATION_BACKENDS = (
#         'django_auth_ldap.backend.LDAPBackend',
#         'django.contrib.auth.backends.ModelBackend',
# )


# import ldap
# from django_auth_ldap.config import LDAPSearch
# from home.models import LDAPConfig

# # Load LDAP settings dynamically from the database
# try:
#     ldap_config = LDAPConfig.objects.first()  # Assumes a single configuration record
#     if ldap_config:
#         AUTH_LDAP_SERVER_URI = ldap_config.server_uri
#         AUTH_LDAP_BIND_DN = ldap_config.bind_dn
#         AUTH_LDAP_BIND_PASSWORD = ldap_config.bind_password
#         AUTH_LDAP_USER_SEARCH = LDAPSearch(
#             ldap_config.user_search_base,
#             ldap.SCOPE_SUBTREE,
#             "(uid=%(user)s)"
#         )
#     else:
#         raise Exception("No LDAP configuration found in the database.")
# except Exception as e:
#     # Handle errors (e.g., log a warning and disable LDAP authentication)
#     AUTH_LDAP_SERVER_URI = None
#     AUTH_LDAP_BIND_DN = None
#     AUTH_LDAP_BIND_PASSWORD = None
#     AUTH_LDAP_USER_SEARCH = None

# CACHES = {
#     'default': {
#         'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
#         'LOCATION': 'unique-snowflake',
#     }
# }




# # Fetch LDAP settings dynamically
# AUTH_LDAP_SERVER_URI = cache.get('LDAP_SERVER_URI', 'ldap://127.0.0.1')  # Default to localhost
# AUTH_LDAP_BIND_DN = cache.get('LDAP_BIND_DN', 'cn=admin,dc=example,dc=com')
# AUTH_LDAP_BIND_PASSWORD = cache.get('LDAP_BIND_PASSWORD', 'password')

# AUTH_LDAP_USER_SEARCH = LDAPSearch(
#     'dc=hughesdev,dc=com',
#     ldap.SCOPE_SUBTREE,
#     '(uid=%(user)s)'
# )
# AUTH_LDAP_GROUP_SEARCH = LDAPSearch(
#     'dc=hughesdev,dc=com',
#     ldap.SCOPE_SUBTREE,
#     '(objectClass=top)'
# )
# AUTH_LDAP_GROUP_TYPE = PosixGroupType(name_attr="cn")
# AUTH_LDAP_ALWAYS_UPDATE_USER = True

# AUTHENTICATION_BACKENDS = [
#     'django_auth_ldap.backend.LDAPBackend',  # LDAP backend
#     'django.contrib.auth.backends.ModelBackend',  # Django default backend
# ]



# import logging

# # Set logging level for ldap
# logger = logging.getLogger('django_auth_ldap')
# logger.setLevel(logging.DEBUG)
# logger.addHandler(logging.StreamHandler())
